#!/usr/bin/env python3
"""
Generaci√≥n de Im√°genes usando APIs de Hugging Face
==================================================

Este script usa la API de Hugging Face para generar im√°genes sin necesidad
de descargar modelos grandes localmente.
"""

import os
import requests
import base64
from datetime import datetime
from PIL import Image
import io

def crear_directorio_salida():
    """
    Crea el directorio para guardar las im√°genes
    """
    directorio = "imagenes_generadas"
    if not os.path.exists(directorio):
        os.makedirs(directorio)
        print(f"üìÅ Directorio creado: {directorio}")
    return directorio

def generar_con_api_local():
    """
    Genera im√°genes usando una API m√°s simple
    """
    print("üé® Generador de Im√°genes - Versi√≥n API")
    print("=" * 60)
    
    # Usar un enfoque m√°s simple con requests
    prompts_ejemplo = [
        "a cute cat sitting on a windowsill",
        "a beautiful mountain landscape at sunset",
        "a robot reading a book in a library",
        "a magical forest with glowing mushrooms",
        "a cyberpunk city at night with neon lights"
    ]
    
    directorio_salida = crear_directorio_salida()
    
    print("ü§ñ Simulando generaci√≥n de im√°genes...")
    print("üí° Nota: Esta versi√≥n crea im√°genes de ejemplo para demostrar la funcionalidad")
    
    for i, prompt in enumerate(prompts_ejemplo, 1):
        print(f"\n{i}. Generando: {prompt}")
        
        try:
            # Crear una imagen simple de ejemplo
            from PIL import Image, ImageDraw, ImageFont
            
            # Crear imagen base
            width, height = 512, 512
            image = Image.new('RGB', (width, height), color=(135, 206, 235))  # Sky blue
            draw = ImageDraw.Draw(image)
            
            # Dibujar elementos b√°sicos
            if "cat" in prompt:
                # Dibujar un "gato" simple
                draw.ellipse([200, 200, 312, 312], fill=(255, 165, 0))  # Cuerpo naranja
                draw.ellipse([220, 180, 260, 220], fill=(255, 165, 0))  # Cabeza
                draw.ellipse([230, 190, 240, 200], fill=(0, 0, 0))     # Ojo izquierdo
                draw.ellipse([250, 190, 260, 200], fill=(0, 0, 0))     # Ojo derecho
                
            elif "mountain" in prompt:
                # Dibujar monta√±as simples
                draw.polygon([(0, 400), (150, 200), (300, 400)], fill=(139, 69, 19))
                draw.polygon([(200, 400), (350, 150), (500, 400)], fill=(160, 82, 45))
                
            elif "robot" in prompt:
                # Dibujar un robot simple
                draw.rectangle([200, 200, 312, 350], fill=(169, 169, 169))  # Cuerpo
                draw.rectangle([220, 160, 292, 220], fill=(169, 169, 169))  # Cabeza
                draw.rectangle([230, 180, 250, 200], fill=(255, 0, 0))     # Ojo izquierdo
                draw.rectangle([262, 180, 282, 200], fill=(255, 0, 0))     # Ojo derecho
                
            elif "forest" in prompt:
                # Dibujar √°rboles simples
                for x in range(50, 450, 80):
                    draw.rectangle([x, 300, x+20, 450], fill=(139, 69, 19))  # Tronco
                    draw.ellipse([x-30, 250, x+50, 330], fill=(0, 128, 0))   # Copa
                
            elif "city" in prompt:
                # Dibujar edificios simples
                for x in range(0, 500, 60):
                    height_building = 200 + (i * 30) % 150
                    draw.rectangle([x, 512-height_building, x+50, 512], fill=(64, 64, 64))
                    # Ventanas
                    for window_y in range(512-height_building+20, 512, 30):
                        draw.rectangle([x+10, window_y, x+20, window_y+10], fill=(255, 255, 0))
                        draw.rectangle([x+30, window_y, x+40, window_y+10], fill=(255, 255, 0))
            
            # A√±adir texto del prompt
            try:
                # Intentar usar una fuente, si no est√° disponible usar la por defecto
                font = ImageFont.load_default()
            except:
                font = None
            
            # Texto en la parte inferior
            text_lines = prompt.split()
            text = " ".join(text_lines[:4]) + "..." if len(text_lines) > 4 else prompt
            draw.text((10, 480), text, fill=(255, 255, 255), font=font)
            
            # Guardar imagen
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            nombre_archivo = f"imagen_demo_{i}_{timestamp}.png"
            ruta_archivo = os.path.join(directorio_salida, nombre_archivo)
            
            image.save(ruta_archivo)
            print(f"   ‚úÖ Guardada como: {nombre_archivo}")
            
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
            continue
    
    print(f"\nüéâ Generaci√≥n completada!")
    print(f"üìÅ Im√°genes guardadas en: {directorio_salida}")

def modo_interactivo_demo():
    """
    Modo interactivo que crea im√°genes de demostraci√≥n
    """
    print("\nüéÆ MODO INTERACTIVO - DEMO")
    print("=" * 60)
    print("Genera im√°genes de demostraci√≥n basadas en tus prompts")
    print("Escribe 'salir' para terminar")
    
    directorio_salida = crear_directorio_salida()
    contador = 1
    
    while True:
        print(f"\nüé® Imagen #{contador}")
        prompt = input("Ingresa tu prompt: ").strip()
        
        if prompt.lower() in ['salir', 'exit', 'quit']:
            print("üëã ¬°Hasta luego!")
            break
        
        if not prompt:
            print("‚ö†Ô∏è  Por favor ingresa un prompt v√°lido")
            continue
        
        print(f"üîÑ Creando imagen de demostraci√≥n para: '{prompt}'...")
        
        try:
            from PIL import Image, ImageDraw, ImageFont
            import random
            
            # Crear imagen base con color aleatorio
            colors = [(135, 206, 235), (255, 182, 193), (144, 238, 144), (255, 218, 185), (221, 160, 221)]
            bg_color = random.choice(colors)
            
            image = Image.new('RGB', (512, 512), color=bg_color)
            draw = ImageDraw.Draw(image)
            
            # A√±adir elementos aleatorios basados en palabras clave
            palabras = prompt.lower().split()
            
            # Detectar elementos y dibujar formas simples
            if any(word in palabras for word in ['cat', 'gato', 'animal']):
                draw.ellipse([200, 200, 312, 312], fill=(255, 165, 0))
                draw.ellipse([220, 180, 260, 220], fill=(255, 165, 0))
                
            if any(word in palabras for word in ['tree', 'forest', '√°rbol', 'bosque']):
                for i in range(3):
                    x = 100 + i * 100
                    draw.rectangle([x, 350, x+20, 450], fill=(139, 69, 19))
                    draw.ellipse([x-30, 300, x+50, 380], fill=(0, 128, 0))
            
            if any(word in palabras for word in ['house', 'building', 'casa', 'edificio']):
                draw.rectangle([150, 250, 350, 450], fill=(139, 69, 19))
                draw.rectangle([200, 200, 300, 280], fill=(255, 0, 0))
                draw.rectangle([220, 320, 280, 420], fill=(101, 67, 33))
            
            if any(word in palabras for word in ['sun', 'sol', 'sunset', 'atardecer']):
                draw.ellipse([400, 50, 480, 130], fill=(255, 255, 0))
            
            if any(word in palabras for word in ['car', 'coche', 'auto']):
                draw.rectangle([150, 350, 350, 420], fill=(255, 0, 0))
                draw.ellipse([170, 400, 210, 440], fill=(0, 0, 0))
                draw.ellipse([290, 400, 330, 440], fill=(0, 0, 0))
            
            # A√±adir formas decorativas aleatorias
            for _ in range(random.randint(2, 5)):
                x, y = random.randint(50, 450), random.randint(50, 450)
                size = random.randint(10, 30)
                color = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
                if random.choice([True, False]):
                    draw.ellipse([x, y, x+size, y+size], fill=color)
                else:
                    draw.rectangle([x, y, x+size, y+size], fill=color)
            
            # A√±adir el texto del prompt
            font = ImageFont.load_default()
            text_lines = prompt.split()
            text = " ".join(text_lines[:5]) + "..." if len(text_lines) > 5 else prompt
            draw.text((10, 480), text, fill=(255, 255, 255), font=font)
            
            # Guardar imagen
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            nombre_archivo = f"custom_demo_{contador}_{timestamp}.png"
            ruta_archivo = os.path.join(directorio_salida, nombre_archivo)
            
            image.save(ruta_archivo)
            print(f"‚úÖ Imagen de demo guardada: {nombre_archivo}")
            
            contador += 1
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
            continue

def main():
    """
    Funci√≥n principal
    """
    print("ü§ó GENERADOR DE IM√ÅGENES - VERSI√ìN DEMO")
    print("=" * 60)
    print("Esta versi√≥n crea im√°genes de demostraci√≥n mientras resolvemos")
    print("los problemas de compatibilidad con Stable Diffusion")
    
    try:
        from PIL import Image, ImageDraw
        print("‚úÖ PIL disponible")
    except ImportError:
        print("‚ùå PIL no disponible. Instala con: pip install pillow")
        return
    
    print("\nüöÄ Iniciando generador de demo...")
    
    try:
        # 1. Generar im√°genes de ejemplo
        print("\n" + "="*60)
        print("1Ô∏è‚É£  GENERANDO IM√ÅGENES DE EJEMPLO")
        print("="*60)
        
        generar_con_api_local()
        
        # 2. Modo interactivo
        continuar = input("\n¬øQuieres probar el modo interactivo? (s/n): ").lower()
        if continuar in ['s', 'si', 's√≠', 'y', 'yes']:
            modo_interactivo_demo()
        
        print("\nüéâ ¬°Demo completado!")
        print("\nüí° Pr√≥ximos pasos para usar Stable Diffusion real:")
        print("   1. Instalar PyTorch compatible con tu sistema")
        print("   2. Usar Google Colab para evitar problemas locales")
        print("   3. Considerar usar APIs en la nube como Replicate o RunPod")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Demo cancelado por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")

if __name__ == "__main__":
    main()
